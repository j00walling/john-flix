{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\j00wa\\\\Documents\\\\CompSci 122B\\\\fe2\\\\src\\\\pages\\\\Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useUser } from \"hook/User\";\nimport styled from \"styled-components\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport Idm from \"backend/idm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n_c = StyledDiv;\nconst StyledH1 = styled.h1`\n`;\nconst StyledInput = styled.input`\n`;\nconst StyledButton = styled.button`\n`;\n/**\r\n * useUser():\r\n * <br>\r\n * This is a hook we will use to keep track of our accessToken and\r\n * refreshToken given to use when the user calls \"login\".\r\n * <br>\r\n * For now, it is not being used, but we recommend setting the two tokens\r\n * here to the tokens you get when the user completes the login call (once\r\n * you are in the .then() function after calling login)\r\n * <br>\r\n * These have logic inside them to make sure the accessToken and\r\n * refreshToken are saved into the local storage of the web browser\r\n * allowing you to keep values alive even when the user leaves the website\r\n * <br>\r\n * <br>\r\n * useForm()\r\n * <br>\r\n * This is a library that helps us with gathering input values from our\r\n * users.\r\n * <br>\r\n * Whenever we make a html component that takes a value (<input>, <select>,\r\n * ect) we call this function in this way:\r\n * <pre>\r\n *     {...register(\"email\")}\r\n * </pre>\r\n * Notice that we have \"{}\" with a function call that has \"...\" before it.\r\n * This is just a way to take all the stuff that is returned by register\r\n * and <i>distribute</i> it as attributes for our components. Do not worry\r\n * too much about the specifics of it, if you would like you can read up\r\n * more about it on \"react-hook-form\"'s documentation:\r\n * <br>\r\n * <a href=\"https://react-hook-form.com/\">React Hook Form</a>.\r\n * <br>\r\n * Their documentation is very detailed and goes into all of these functions\r\n * with great examples. But to keep things simple: Whenever we have a html with\r\n * input we will use that function with the name associated with that input,\r\n * and when we want to get the value in that input we call:\r\n * <pre>\r\n * getValue(\"email\")\r\n * </pre>\r\n * <br>\r\n * To Execute some function when the user asks we use:\r\n * <pre>\r\n *     handleSubmit(ourFunctionToExecute)\r\n * </pre>\r\n * This wraps our function and does some \"pre-checks\" before (This is useful if\r\n * you want to do some input validation, more of that in their documentation)\r\n */\n\nconst Login = () => {\n  _s();\n\n  const {\n    accessToken,\n    setAccessToken,\n    refreshToken,\n    setRefreshToken\n  } = useUser();\n  const {\n    register,\n    getValues,\n    handleSubmit\n  } = useForm();\n  const navigate = useNavigate();\n\n  const submitLogin = () => {\n    const email = getValues(\"email\");\n    const password = getValues(\"password\");\n    const payLoad = {\n      email: email,\n      password: password.split('')\n    };\n    Idm.login(payLoad).then(response => {\n      navigate(\"/\");\n      setAccessToken(response.data.accessToken);\n      alert(JSON.stringify(response.data, null, 2));\n    }).catch(error => alert(JSON.stringify(error.response.data, null, 2)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"email\"),\n      type: \"email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"password\"),\n      type: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit(submitLogin),\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"UAe+QOdtdqvrh2auT5gaa0bwXZQ=\", false, function () {\n  return [useUser, useForm, useNavigate];\n});\n\n_c2 = Login;\nexport default Login;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledDiv\");\n$RefreshReg$(_c2, \"Login\");","map":{"version":3,"sources":["C:/Users/j00wa/Documents/CompSci 122B/fe2/src/pages/Login.jsx"],"names":["React","useUser","styled","useForm","useNavigate","Idm","StyledDiv","div","StyledH1","h1","StyledInput","input","StyledButton","button","Login","accessToken","setAccessToken","refreshToken","setRefreshToken","register","getValues","handleSubmit","navigate","submitLogin","email","password","payLoad","split","login","then","response","data","alert","JSON","stringify","catch","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAGA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAI;AAC7B;AACA;AACA,CAHA;KAAMD,S;AAKN,MAAME,QAAQ,GAAGN,MAAM,CAACO,EAAG;AAC3B,CADA;AAGA,MAAMC,WAAW,GAAGR,MAAM,CAACS,KAAM;AACjC,CADA;AAGA,MAAMC,YAAY,GAAGV,MAAM,CAACW,MAAO;AACnC,CADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM;AACFC,IAAAA,WADE;AACWC,IAAAA,cADX;AAEFC,IAAAA,YAFE;AAEYC,IAAAA;AAFZ,MAGFjB,OAAO,EAHX;AAMA,QAAM;AAACkB,IAAAA,QAAD;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAAsClB,OAAO,EAAnD;AACA,QAAMmB,QAAQ,GAAGlB,WAAW,EAA5B;;AAEA,QAAMmB,WAAW,GAAG,MAAM;AACtB,UAAMC,KAAK,GAAGJ,SAAS,CAAC,OAAD,CAAvB;AACA,UAAMK,QAAQ,GAAGL,SAAS,CAAC,UAAD,CAA1B;AAEA,UAAMM,OAAO,GAAG;AACZF,MAAAA,KAAK,EAAEA,KADK;AAEZC,MAAAA,QAAQ,EAAEA,QAAQ,CAACE,KAAT,CAAe,EAAf;AAFE,KAAhB;AAKAtB,IAAAA,GAAG,CAACuB,KAAJ,CAAUF,OAAV,EACKG,IADL,CACUC,QAAQ,IAAI;AACdR,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACAN,MAAAA,cAAc,CAACc,QAAQ,CAACC,IAAT,CAAchB,WAAf,CAAd;AACAiB,MAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACC,IAAxB,EAA8B,IAA9B,EAAoC,CAApC,CAAD,CAAL;AACH,KALL,EAMKI,KANL,CAMWC,KAAK,IAAIJ,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeE,KAAK,CAACN,QAAN,CAAeC,IAA9B,EAAoC,IAApC,EAA0C,CAA1C,CAAD,CANzB;AAOH,GAhBD;;AAkBA,sBACI,QAAC,SAAD;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,sBAAWZ,QAAQ,CAAC,OAAD,CAAnB;AAA8B,MAAA,IAAI,EAAE;AAApC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,sBAAWA,QAAQ,CAAC,UAAD,CAAnB;AAAiC,MAAA,IAAI,EAAE;AAAvC;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAQ,MAAA,OAAO,EAAEE,YAAY,CAACE,WAAD,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CApCD;;GAAMT,K;UAIEb,O,EAGwCE,O,EAC3BC,W;;;MARfU,K;AAsCN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\r\nimport {useUser} from \"hook/User\";\r\nimport styled from \"styled-components\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useNavigate} from \"react-router-dom\"\r\nimport Idm from \"backend/idm\";\r\n\r\n\r\nconst StyledDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst StyledH1 = styled.h1`\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n`\r\n/**\r\n * useUser():\r\n * <br>\r\n * This is a hook we will use to keep track of our accessToken and\r\n * refreshToken given to use when the user calls \"login\".\r\n * <br>\r\n * For now, it is not being used, but we recommend setting the two tokens\r\n * here to the tokens you get when the user completes the login call (once\r\n * you are in the .then() function after calling login)\r\n * <br>\r\n * These have logic inside them to make sure the accessToken and\r\n * refreshToken are saved into the local storage of the web browser\r\n * allowing you to keep values alive even when the user leaves the website\r\n * <br>\r\n * <br>\r\n * useForm()\r\n * <br>\r\n * This is a library that helps us with gathering input values from our\r\n * users.\r\n * <br>\r\n * Whenever we make a html component that takes a value (<input>, <select>,\r\n * ect) we call this function in this way:\r\n * <pre>\r\n *     {...register(\"email\")}\r\n * </pre>\r\n * Notice that we have \"{}\" with a function call that has \"...\" before it.\r\n * This is just a way to take all the stuff that is returned by register\r\n * and <i>distribute</i> it as attributes for our components. Do not worry\r\n * too much about the specifics of it, if you would like you can read up\r\n * more about it on \"react-hook-form\"'s documentation:\r\n * <br>\r\n * <a href=\"https://react-hook-form.com/\">React Hook Form</a>.\r\n * <br>\r\n * Their documentation is very detailed and goes into all of these functions\r\n * with great examples. But to keep things simple: Whenever we have a html with\r\n * input we will use that function with the name associated with that input,\r\n * and when we want to get the value in that input we call:\r\n * <pre>\r\n * getValue(\"email\")\r\n * </pre>\r\n * <br>\r\n * To Execute some function when the user asks we use:\r\n * <pre>\r\n *     handleSubmit(ourFunctionToExecute)\r\n * </pre>\r\n * This wraps our function and does some \"pre-checks\" before (This is useful if\r\n * you want to do some input validation, more of that in their documentation)\r\n */\r\nconst Login = () => {\r\n    const {\r\n        accessToken, setAccessToken,\r\n        refreshToken, setRefreshToken\r\n    } = useUser();\r\n\r\n\r\n    const {register, getValues, handleSubmit} = useForm();\r\n    const navigate = useNavigate();\r\n\r\n    const submitLogin = () => {\r\n        const email = getValues(\"email\");\r\n        const password = getValues(\"password\");\r\n\r\n        const payLoad = {\r\n            email: email,\r\n            password: password.split('')\r\n        }\r\n\r\n        Idm.login(payLoad)\r\n            .then(response => {\r\n                navigate(\"/\");\r\n                setAccessToken(response.data.accessToken);\r\n                alert(JSON.stringify(response.data, null, 2));\r\n            })\r\n            .catch(error => alert(JSON.stringify(error.response.data, null, 2)))\r\n    }\r\n\r\n    return (\r\n        <StyledDiv>\r\n            <h1>Login</h1>\r\n            <input {...register(\"email\")} type={\"email\"}/>\r\n            <input {...register(\"password\")} type={\"password\"}/>\r\n            <button onClick={handleSubmit(submitLogin)}>Login</button>\r\n        </StyledDiv>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}